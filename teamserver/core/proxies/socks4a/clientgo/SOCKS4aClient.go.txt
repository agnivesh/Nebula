package main

import (
	"encoding/binary"
	"fmt"
	"io"
	"net"
	"os"
)

func main() {
	// Configuration: update as needed
	proxyAddr := "127.0.0.1:9090"     // Where the Python proxy server listens
	destHost := "example.com"         // Target domain (SOCKS4a)
	destPort := uint16(80)            // Target port

	// Connect to SOCKS4a proxy server
	conn, err := net.Dial("tcp", proxyAddr)
	if err != nil {
		fmt.Println("Error connecting to proxy:", err)
		return
	}
	defer conn.Close()

	// Construct SOCKS4a request
	buf := make([]byte, 0, 512)
	buf = append(buf, 0x04)                            // SOCKS version
	buf = append(buf, 0x01)                            // CONNECT command
	portBytes := make([]byte, 2)
	binary.BigEndian.PutUint16(portBytes, destPort)
	buf = append(buf, portBytes...)                    // Destination port
	buf = append(buf, []byte{0, 0, 0, 1}...)           // Fake IP for SOCKS4a
	buf = append(buf, 0x00)                            // Null byte for user ID
	buf = append(buf, []byte(destHost)...)            // Domain name
	buf = append(buf, 0x00)                            // Null terminator

	_, err = conn.Write(buf)
	if err != nil {
		fmt.Println("Failed to send SOCKS4a request:", err)
		return
	}

	// Read response
	resp := make([]byte, 8)
	_, err = io.ReadFull(conn, resp)
	if err != nil {
		fmt.Println("Failed to read SOCKS4a response:", err)
		return
	}

	if resp[1] != 0x5A {
		fmt.Printf("Connection rejected: 0x%X\n", resp[1])
		return
	}

	fmt.Println("[+] Connected to target via proxy")

	// Pipe stdin to conn and conn to stdout
	go io.Copy(conn, os.Stdin)
	io.Copy(os.Stdout, conn)
}
